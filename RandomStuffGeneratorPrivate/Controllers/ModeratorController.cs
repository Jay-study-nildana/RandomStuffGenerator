using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using RandomStuffGeneratorPrivate.APIJSONClasses;
using RandomStuffGeneratorPrivate.DatabaseClasses;
using RandomStuffGeneratorPrivate.Enums;
using RandomStuffGeneratorPrivate.HelperStuff;
using RandomStuffGeneratorPrivate.Interfaces;
using RandomStuffGeneratorPrivate.OtherClasses;
using RandomStuffGeneratorPrivate.POCO;

namespace RandomStuffGeneratorPrivate.Controllers
{
    [Route("api/[controller]")]
    [Authorize(Policy = "Moderator")]
    [ApiController]
    public class ModeratorController : ControllerBase
    {
        //here is the context

        private readonly QuoteCMSContext _context;

        public ModeratorController(QuoteCMSContext context)
        {
            _context = context;
        }

        #region version 0.2.0 and before.

        [HttpGet]
        [Route("Hi")]
        public ActionResult<GeneralAPIResponse> ServerDetailsHi()
        {
            var generalAPIResponse = new GeneralAPIResponse();

            var tempString1 = "Okay, You have Moderator Role";
            generalAPIResponse.ListOfResponses.Add(tempString1);
            generalAPIResponse.dateTimeOfResponse = DateTime.Now;

            return generalAPIResponse;
        }
        [HttpGet]
        [Route("GetAllQuotes")]
        public async Task<ActionResult<QuoteCubeCollection>> GetAllQuotes()
        {
            OptionsCollectionOfQuotes optionsCollectionOfQuotes = new OptionsCollectionOfQuotes();
            IQuoteCubeCollection quoteCubeCollection = new ReturnQuoteCubeCollection();
            
            //set up collection options.
            optionsCollectionOfQuotes.enumSourceOfData = EnumSourceOfData.DataBaseInContext;
            optionsCollectionOfQuotes.bloggingContext = _context;

            var tempCubeCollection = await quoteCubeCollection.GetQuoteCubeCollection(optionsCollectionOfQuotes);

            var generalAPIResponse = new GeneralAPIResponse
            {
                dateTimeOfResponse = DateTime.Now
            };
            tempCubeCollection.generalAPIResponse = generalAPIResponse;

            return tempCubeCollection;
        }

        #endregion

        #region Version 0.3.0 added endpoints

        [HttpPost]
        [Route("AddNewQuote")]
        public async Task<ActionResult<AddNewQuoteCRUDResponse>> AddQuoteModel(QuoteCubeForPOSTCreate quoteCubeForPOST)
        {
            IStandardCRUD standardCRUD = new QuoteModelCRUD();

            var crudResponse = (AddNewQuoteCRUDResponse) await standardCRUD.AddOneRow(quoteCubeForPOST, _context);

            return crudResponse;
        }


        //use this for testing. You dont need to enter a quote and author everytime.
        [HttpPost]
        [Route("AddAutoGeneratedQuotePlural")]
        public async Task<ActionResult<List<AddNewQuoteCRUDResponse>>> AddAutoGeneratedQuote(int NumberOfQuotes)
        {
            List<AddNewQuoteCRUDResponse> addNewQuoteCRUDResponses = new List<AddNewQuoteCRUDResponse>();
            IStandardCRUD standardCRUD = new QuoteModelCRUD();

            QuoteCubeForPOSTCreate quoteCubeForPOST = new QuoteCubeForPOSTCreate();
            IGenerateRandomQuote generateRandomQuote = new GenerateRandomQuoteSimple();

            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();

            for (int i = 0; i < NumberOfQuotes; i++)
            {
                var autogeneratedRandomQuote = generateRandomQuote.GenerateQuoteCubeRandom();
                quoteCubeForPOST.QuoteAuthor = autogeneratedRandomQuote.QuoteAuthor;
                quoteCubeForPOST.QuoteContent = autogeneratedRandomQuote.QuoteContent;

                var crudResponse = (AddNewQuoteCRUDResponse) await standardCRUD.AddOneRow(quoteCubeForPOST, _context);

                addNewQuoteCRUDResponses.Add(crudResponse);
            }

            stopWatch.Stop();

            // Get the elapsed time as a TimeSpan value.
            _ = stopWatch.Elapsed;

            return addNewQuoteCRUDResponses;
        }

        //Originally, I built it. 
        //Then, I realized, I could just use the AddAutoGeneratedQuotePlural for this work.

        ////use this for testing. You dont need to enter a quote and author everytime.
        //[HttpPost]
        //[Route("AddNewQuoteAutoGenerated")]
        //public async Task<ActionResult<GeneralAPIResponse>> AddAutoGeneratedQuote()
        //{
        //    var generalAPIResponse = new GeneralAPIResponse();
        //    IStandardCRUD standardCRUD = new QuoteModelCRUD();

        //    QuoteCubeForPOSTCreate quoteCubeForPOST = new QuoteCubeForPOSTCreate();
        //    IGenerateRandomQuote generateRandomQuote = new GenerateRandomQuoteSimple();
        //    var autogeneratedRandomQuote = generateRandomQuote.GenerateQuoteCubeRandom();
        //    quoteCubeForPOST.QuoteAuthor = autogeneratedRandomQuote.QuoteAuthor;
        //    quoteCubeForPOST.QuoteContent = autogeneratedRandomQuote.QuoteContent;

        //    var crudResponse = (AddNewQuoteCRUDResponse) await standardCRUD.AddOneRow(quoteCubeForPOST, _context);

        //    generalAPIResponse.dateTimeOfResponse = crudResponse.dateTimeOfResponse;
        //    generalAPIResponse.DetailsAboutOperation = crudResponse.DetailsAboutOperation;
        //    generalAPIResponse.ListOfResponses = crudResponse.ListOfResponses;
        //    generalAPIResponse.OperationSuccessful = crudResponse.OperationSuccessful;

        //    return generalAPIResponse;
        //}

        [HttpPost]
        [Route("UpdateExistingQuote")]
        public async Task<ActionResult<AddNewQuoteCRUDResponse>> UpdateQuoteModel(QuoteCubeForPOSTUpdate quoteCubeForPOST)
        {
            IStandardCRUD standardCRUD = new QuoteModelCRUD();

            var crudResponse = (AddNewQuoteCRUDResponse) await standardCRUD.UpdateOneRow(quoteCubeForPOST, _context);

            return crudResponse;

        }

        [HttpPost]
        [Route("GetQuoteAlongWithItsLifeStory")]
        public async Task<ActionResult<CRUDAPIResponseQuoteWithHistory>> GetQuoteWithHistory(QuoteSpecificCubeRequest quoteSpecificCubeRequest)
        {
            var cRUDAPIResponseQuoteWithHistory = new CRUDAPIResponseQuoteWithHistory();
            IStandardCRUD standardCRUD = new QuoteHistoryCRUD();

            var crudResponse = (CRUDResponse)await standardCRUD.ReadAllRows(quoteSpecificCubeRequest.QuoteIdentifier, _context);

            cRUDAPIResponseQuoteWithHistory.dateTimeOfResponse = crudResponse.dateTimeOfResponse;
            cRUDAPIResponseQuoteWithHistory.DetailsAboutOperation = crudResponse.DetailsAboutOperation;
            cRUDAPIResponseQuoteWithHistory.ListOfResponses = crudResponse.ListOfResponses;
            cRUDAPIResponseQuoteWithHistory.OperationSuccessful = crudResponse.OperationSuccessful;
            cRUDAPIResponseQuoteWithHistory.QuoteWithHistoryItems = (QuoteWithHistoryItems)crudResponse.CRUDOperationResult;

            return cRUDAPIResponseQuoteWithHistory;
        }
        #endregion
    }
}
